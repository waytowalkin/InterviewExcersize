plugins {
    id 'java'
}
java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

wrapper {
    gradleVersion = "${gradle_version}"
}

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    testImplementation group: 'junit', name: 'junit', version: '4.12'
    testImplementation group: 'org.hamcrest', name: 'hamcrest', version: '2.1'
    testImplementation group: 'org.hamcrest', name: 'hamcrest-library', version: '2.1'
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '2.27.0'
    testImplementation group: 'org.easymock', name: 'easymock', version: '4.0.2'
    testImplementation group: 'org.jmock', name: 'jmock-junit4', version: '2.11.0'
}


sourceSets {
    functionalTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/functional-test/java')
        }
        resources.srcDir file('src/functional-test/resources')
    }
}

configurations {
    functionalTestImplementation.extendsFrom testImplementation
    functionalTestRuntimeOnly.extendsFrom testRuntimeOnly
}

task functionalTest(type: Test) {
    group = 'verification'
    description = 'Runs the functional tests.'
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
    outputs.upToDateWhen { false }
    mustRunAfter test

    useJUnitPlatform()

    testLogging {
        events = ['FAILED', 'PASSED', 'SKIPPED', 'STANDARD_OUT']
    }
}

test {
    useJUnitPlatform()

    testLogging {
        events = ['FAILED', 'PASSED', 'SKIPPED', 'STANDARD_OUT']
    }
}

check {
    dependsOn functionalTest
}








